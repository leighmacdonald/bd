// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package store

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.messageSaveStmt, err = db.PrepareContext(ctx, messageSave); err != nil {
		return nil, fmt.Errorf("error preparing query MessageSave: %w", err)
	}
	if q.messagesStmt, err = db.PrepareContext(ctx, messages); err != nil {
		return nil, fmt.Errorf("error preparing query Messages: %w", err)
	}
	if q.playerStmt, err = db.PrepareContext(ctx, player); err != nil {
		return nil, fmt.Errorf("error preparing query Player: %w", err)
	}
	if q.playerInsertStmt, err = db.PrepareContext(ctx, playerInsert); err != nil {
		return nil, fmt.Errorf("error preparing query PlayerInsert: %w", err)
	}
	if q.playerSearchStmt, err = db.PrepareContext(ctx, playerSearch); err != nil {
		return nil, fmt.Errorf("error preparing query PlayerSearch: %w", err)
	}
	if q.playerUpdateStmt, err = db.PrepareContext(ctx, playerUpdate); err != nil {
		return nil, fmt.Errorf("error preparing query PlayerUpdate: %w", err)
	}
	if q.userNameSaveStmt, err = db.PrepareContext(ctx, userNameSave); err != nil {
		return nil, fmt.Errorf("error preparing query UserNameSave: %w", err)
	}
	if q.userNamesStmt, err = db.PrepareContext(ctx, userNames); err != nil {
		return nil, fmt.Errorf("error preparing query UserNames: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.messageSaveStmt != nil {
		if cerr := q.messageSaveStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing messageSaveStmt: %w", cerr)
		}
	}
	if q.messagesStmt != nil {
		if cerr := q.messagesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing messagesStmt: %w", cerr)
		}
	}
	if q.playerStmt != nil {
		if cerr := q.playerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing playerStmt: %w", cerr)
		}
	}
	if q.playerInsertStmt != nil {
		if cerr := q.playerInsertStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing playerInsertStmt: %w", cerr)
		}
	}
	if q.playerSearchStmt != nil {
		if cerr := q.playerSearchStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing playerSearchStmt: %w", cerr)
		}
	}
	if q.playerUpdateStmt != nil {
		if cerr := q.playerUpdateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing playerUpdateStmt: %w", cerr)
		}
	}
	if q.userNameSaveStmt != nil {
		if cerr := q.userNameSaveStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing userNameSaveStmt: %w", cerr)
		}
	}
	if q.userNamesStmt != nil {
		if cerr := q.userNamesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing userNamesStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db               DBTX
	tx               *sql.Tx
	messageSaveStmt  *sql.Stmt
	messagesStmt     *sql.Stmt
	playerStmt       *sql.Stmt
	playerInsertStmt *sql.Stmt
	playerSearchStmt *sql.Stmt
	playerUpdateStmt *sql.Stmt
	userNameSaveStmt *sql.Stmt
	userNamesStmt    *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:               tx,
		tx:               tx,
		messageSaveStmt:  q.messageSaveStmt,
		messagesStmt:     q.messagesStmt,
		playerStmt:       q.playerStmt,
		playerInsertStmt: q.playerInsertStmt,
		playerSearchStmt: q.playerSearchStmt,
		playerUpdateStmt: q.playerUpdateStmt,
		userNameSaveStmt: q.userNameSaveStmt,
		userNamesStmt:    q.userNamesStmt,
	}
}
